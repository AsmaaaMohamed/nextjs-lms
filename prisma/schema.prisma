generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String    @db.VarChar(100)
  password String
  provider String    @default("")
  isAdmin  Boolean   @default(false)
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  comment  Comment[]
}

model CourseCategory {
  id       Int      @id @default(autoincrement())
  title    String?  @db.VarChar(200)
  icon     String
  img      String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Course {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(200)
  category     String         @db.VarChar(200)
  instructorId Int
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  img          String
  price        Float
  users        UsersCourses[]
}

model UsersCourses {
  id         Int      @id @default(autoincrement())
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   Int // relation scalar field (used in the `@relation` attribute above)
  enrolledAt DateTime @default(now())
  @@unique([userId ,courseId])
  @@index([courseId])
}

model Instructor {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  position String   @db.VarChar(100)
  img      String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Skill {
  id       Int      @id @default(autoincrement())
  title    String   @db.VarChar(100)
  desc     String
  icon     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Post {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(100)
  author         String    @db.VarChar(100)
  post_desc      String
  comments_count Int
  img            String
  url            String
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  comments       Comment[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  text     String
  postId   Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
  post     Post     @relation(fields: [postId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}
